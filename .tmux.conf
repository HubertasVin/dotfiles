# Source: https://github.com/HubertasVin/dotfiles/blob/main/.tmux.conf


# -- general -------------------------------------------------------------------

set -g mouse on

set-option -g default-shell /usr/bin/zsh

set-option -ga terminal-overrides ",alacritty:Tc"
set -g default-terminal "alacritty"

set -s escape-time 10                     # faster command sequences
set -sg repeat-time 600                   # increase repeat timeout
set -s focus-events on

set -g history-limit 50000                # boost history

set -g renumber-windows on                # auto renum windows after update

# reload configuration
bind r run '"$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} source "$TMUX_CONF"' \; display "#{TMUX_CONF} sourced"


# -- display -------------------------------------------------------------------

set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows

set -g status-interval 1      # redraw status line every 10 seconds

# activity
set -g monitor-activity on
set -g visual-activity off


# -- navigation ----------------------------------------------------------------

# Unbind the default leader key
unbind C-b

# Set Ctrl+a as the new leader key
set-option -g prefix C-a

# create session
bind C-c new-session

# create window
unbind c
unbind C
bind c new-window -a        # new window immediately to the right of current
bind C new-window -b        # new window immediately to the left of current

# split current window horizontally
bind - split-window -v -c "#{pane_current_path}"
# split current window vertically
bind _ split-window -h -c "#{pane_current_path}"

# bind X to kill the current pane without confirmation
bind x kill-pane

# choose a session to switch to
bind s choose-session "switch-client -t '%%'"

# move to previous session
bind Q switch-client -l

# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right

bind -r Left select-pane -L  # move left
bind -r Down select-pane -D  # move down
bind -r Up select-pane -U  # move up
bind -r Right select-pane -R  # move right

bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# maximize current pane
bind + run "cut -c3- '#{TMUX_CONF}' | sh -s _maximize_pane '#{session_name}' '#D'"

# pane resizing
bind-key -r -T prefix C-k resize-pane -U 5
bind-key -r -T prefix C-j resize-pane -D 5
bind-key -r -T prefix C-h resize-pane -L 5
bind-key -r -T prefix C-l resize-pane -R 5

bind-key -r -T prefix C-Up resize-pane -U 5
bind-key -r -T prefix C-Down resize-pane -D 5
bind-key -r -T prefix C-Left resize-pane -L 5
bind-key -r -T prefix C-Right resize-pane -R 5

# window navigation
unbind n
unbind p
bind q last-window        # move to last active window

# Fix Ctrl+Left and Right binds for cursor movement in terminal prompt writing
unbind-key -n C-Up
unbind-key -n C-Down
unbind-key -n C-Left
unbind-key -n C-Right


# -- copy mode -----------------------------------------------------------------

bind Enter copy-mode # enter copy mode

bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-selection-and-cancel
bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi H send -X start-of-line
bind -T copy-mode-vi L send -X end-of-line
bind -T copy-mode ? command-prompt -i -I "#{pane_search_string}" -T search -p "(search up)" { send-keys -X search-backward-incremental "%%" }
bind -T copy-mode / command-prompt -i -I "#{pane_search_string}" -T search -p "(search down)" { send-keys -X search-forward-incremental "%%" }

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to Wayland clipboard
if -b '[ "$XDG_SESSION_TYPE" = "wayland" ] && command -v wl-copy > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | wl-copy"'


# -- buffers -------------------------------------------------------------------

bind b list-buffers     # list paste buffers
bind p paste-buffer -p  # paste from the top paste buffer
bind P choose-buffer    # choose which buffer to paste from


# -- 8< ------------------------------------------------------------------------

%if #{==:#{TMUX_PROGRAM},}
  run 'TMUX_PROGRAM="$(LSOF=$(PATH="$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" command -v lsof); $LSOF -b -w -a -d txt -p #{pid} -Fn 2>/dev/null | perl -n -e "if (s/^n((?:.(?!dylib$|so$))+)$/\1/g && s/(?:\s+\([^\s]+?\))?$//g) { print; exit } } exit 1; {" || readlink "/proc/#{pid}/exe" 2>/dev/null || printf tmux)"; "$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_PROGRAM "$TMUX_PROGRAM"'
%endif
%if #{==:#{TMUX_SOCKET},}
  run '"$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_SOCKET "#{socket_path}"'
%endif
%if #{==:#{TMUX_CONF},}
  run '"$TMUX_PROGRAM" set-environment -g TMUX_CONF $(for conf in "$HOME/.tmux.conf" "$XDG_CONFIG_HOME/tmux/tmux.conf" "$HOME/.config/tmux/tmux.conf"; do [ -f "$conf" ] && printf "%s" "$conf" && break; done)'
%endif
%if #{==:#{TMUX_CONF_LOCAL},}
  run '"$TMUX_PROGRAM" set-environment -g TMUX_CONF_LOCAL "$TMUX_CONF.local"'
%endif

run '"$TMUX_PROGRAM" source "$TMUX_CONF_LOCAL"'
run 'cut -c3- "$TMUX_CONF" | sh -s _apply_configuration'

# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# unset GREP_OPTIONS
# export LC_NUMERIC=C
# # shellcheck disable=SC3041
# if (set +H 2>/dev/null); then
#   set +H
# fi
#
# if ! printf '' | sed -E 's///' 2>/dev/null; then
#   if printf '' | sed -r 's///' 2>/dev/null; then
#     sed() {
#       n=$#; while [ "$n" -gt 0 ]; do arg=$1; shift; case $arg in -E*) arg=-r${arg#-E};; esac; set -- "$@" "$arg"; n=$(( n - 1 )); done
#       command sed "$@"
#     }
#   fi
# fi
#
# _uname_s=$(uname -s)
#
# [ -z "$TMUX" ] && exit 255
# if [ -z "$TMUX_SOCKET" ]; then
#   TMUX_SOCKET=$(printf '%s' "$TMUX" | cut -d, -f1)
# fi
# if [ -z "$TMUX_PROGRAM" ]; then
#   TMUX_PID=$(printf '%s' "$TMUX" | cut -d, -f2)
#   TMUX_PROGRAM=$(lsof -b -w -a -d txt -p "$TMUX_PID" -Fn 2>/dev/null | perl -n -e "if (s/^n((?:.(?!dylib$|so$))+)$/\1/g) { print; exit } } exit 1; {" || readlink "/proc/$TMUX_PID/exe" 2>/dev/null || printf tmux)
# fi
# if [ "$TMUX_PROGRAM" = "tmux" ]; then
#   tmux() {
#     command tmux ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} "$@"
#   }
# else
#   tmux() {
#     "$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} "$@"
#   }
# fi
#
# _tmux_version=$(tmux -V | awk '{gsub(/[^0-9.]/, "", $2); print ($2+0) * 100}')
#
# _is_true() {
#   [ "$1" = "true" ] || [ "$1" = "yes" ] || [ "$1" = "1" ]
# }
#
# _is_enabled() {
#   [ "$1" = "enabled" ]
# }
#
# _is_disabled() {
#   [ "$1" = "disabled" ]
# }
#
# _decode_unicode_escapes() {
#   printf '%s' "$*" | perl -CS -pe 's/(\\u([0-9A-Fa-f]{1,4})|\\U([0-9A-Fa-f]{1,8}))/chr(hex($2.$3))/eg' 2>/dev/null
# }
#
# if command -v pkill > /dev/null 2>&1; then
#   _pkillf() {
#     pkill -f "$@" || true
#   }
# else
#   # shellcheck disable=SC2009
#   _pkillf() {
#     while IFS= read -r pid; do
#       kill "$pid" || true
#     done  << EOF
# $(ps -x -o pid= -o command= | grep -E "$@" | cut -d' ' -f1)
# EOF
#   }
# fi
#
# _maximize_pane() {
#   current_session=${1:-$(tmux display -p '#{session_name}')}
#   current_pane=${2:-$(tmux display -p '#{pane_id}')}
#
#   dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -E -o '^1 %.+maximized.+$' || true)
#   restore=$(printf "%s" "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p"\
#                                            -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p")
#
#   if [ -z "$restore" ]; then
#     [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
#     info=$(tmux new-window -t "$current_session:" -F "#{session_name}:#{window_index}.#{pane_id}" -P "maximized... 2>/dev/null & \"$TMUX_PROGRAM\" ${TMUX_SOCKET:+-S \"$TMUX_SOCKET\"} setw -t \"$current_session:\" remain-on-exit on; printf \"\\033[\$(tput lines);0fPane has been maximized, press <prefix>+ to restore\n\" '$current_pane'")
#     session_window=${info%.*}
#     new_pane=${info#*.}
#
#     retry=20
#     while [ "$("$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} list-panes -t "$session_window" -F '#{session_name}:#{window_index}.#{pane_id} #{pane_dead}' 2>/dev/null)" != "$info 1" ] && [ "$retry" -ne 0 ]; do
#       sleep 0.1
#       retry=$((retry - 1))
#     done
#     if [ "$retry" -eq 0 ]; then
#       tmux display 'Unable to maximize pane'
#     fi
#
#     tmux setw -t "$session_window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
#   else
#     $restore || tmux kill-pane
#   fi
# }
#
# _pane_info() {
#   pane_pid="$1"
#   pane_tty="${2##/dev/}"
#   case "$_uname_s" in
#     *Linux*)
#       ps -t "$pane_tty" --sort=lstart -o user=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -o pid= -o ppid= -o command= | awk -v pane_pid="$pane_pid" '
#         ((/ssh/ && !/-W/ && !/tsh proxy ssh/ && !/sss_ssh_knownhostsproxy/) || !/ssh/) && !/tee/ {
#           user[$2] = $1; if (!child[$3]) child[$3] = $2; pid=$2; $1 = $2 = $3 = ""; command[pid] = substr($0,4)
#         }
#         END {
#           pid = pane_pid
#           while (child[pid])
#             pid = child[pid]
#
#           print pid":"user[pid]":"command[pid]
#         }
#       '
#       ;;
#     *)
#       ps -t "/dev/$pane_tty" -o user=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -o pid= -o ppid= -o command= | awk -v pane_pid="$pane_pid" '
#         ((/ssh/ && !/-W/ && !/tsh proxy ssh/ && !/sss_ssh_knownhostsproxy/) || !/ssh/) && !/tee/ {
#           user[$2] = $1; if (!child[$3]) child[$3] = $2; pid=$2; $1 = $2 = $3 = ""; command[pid] = substr($0,4)
#         }
#         END {
#           pid = pane_pid
#           while (child[pid])
#             pid = child[pid]
#
#           print pid":"user[pid]":"command[pid]
#         }
#       '
#       ;;
#   esac
# }
#
# _ssh_or_mosh_args() {
#   case "$1" in
#     *ssh*)
#       args=$(printf '%s' "$1" | perl -n -e 'print if s/.*?\bssh[\w_-]*\s*(.*)/\1/')
#       ;;
#     *mosh-client*)
#       args=$(printf '%s' "$1" | sed -E -e 's/.*mosh-client -# (.*)\|.*$/\1/' -e 's/-[^ ]*//g' -e 's/\d:\d//g')
#       ;;
#   esac
#
#  printf '%s' "$args"
# }
#
# _username() {
#   pane_pid=${1:-$(tmux display -p '#{pane_pid}')}
#   pane_tty=${2:-$(tmux display -p '#{b:pane_tty}')}
#   ssh_only=$3
#
#   pane_info=$(_pane_info "$pane_pid" "$pane_tty")
#   command=${pane_info#*:}
#   command=${command#*:}
#
#   ssh_or_mosh_args=$(_ssh_or_mosh_args "$command")
#   if [ -n "$ssh_or_mosh_args" ]; then
#     # shellcheck disable=SC2086
#     username=$(ssh -G $ssh_or_mosh_args 2>/dev/null | awk '/^user / { print $2; exit }')
#     # shellcheck disable=SC2086
#     [ -z "$username" ] && username=$(ssh $ssh_or_mosh_args -T -o ControlPath=none -o ProxyCommand="sh -c 'echo %%username%% %r >&2'" 2>&1 | awk '/^%username% / { print $2; exit }')
#     # shellcheck disable=SC2086
#     [ -z "$username" ] && username=$(ssh $ssh_or_mosh_args -v -T -o ControlPath=none -o ProxyCommand=false -o IdentityFile='%%username%%/%r' 2>&1 | awk '/%username%/ { print substr($4,12); exit }')
#   else
#     if ! _is_true "$ssh_only"; then
#       username=${pane_info#*:}
#       username=${username%%:*}
#     fi
#   fi
#
#   printf '%s\n' "$username"
# }
#
# _root() {
#   pane_pid=${1:-$(tmux display -p '#{pane_pid}')}
#   pane_tty=${2:-$(tmux display -p '#{b:pane_tty}')}
#   root=$3
#
#   username=$(_username "$pane_pid" "$pane_tty" false)
#
#   [ "$username" = "root" ] && echo "$root"
# }
#
# _uptime() {
#   case "$_uname_s" in
#     *Linux*|*CYGWIN*|*MSYS*|*MINGW*)
#       boot=0
#       now=$(cut -d' ' -f1 < /proc/uptime)
#       ;;
#   esac
#   # shellcheck disable=SC1004
#   awk -v tmux="$TMUX_PROGRAM ${TMUX_SOCKET:+-S "$TMUX_SOCKET"}" -v boot="$boot" -v now="$now" '
#     BEGIN {
#       uptime = now - boot
#       y = int(uptime / 31536000)
#       dy = int(uptime / 86400) % 365
#       d = int(uptime / 86400)
#       h = int(uptime / 3600) % 24
#       m = int(uptime / 60) % 60
#       s = int(uptime) % 60
#
#       system(tmux " set -g @uptime_y " y + 0    " \\;" \
#                   " set -g @uptime_dy " dy + 0  " \\;" \
#                   " set -g @uptime_d " d + 0    " \\;" \
#                   " set -g @uptime_h " h + 0    " \\;" \
#                   " set -g @uptime_m " m + 0    " \\;" \
#                   " set -g @uptime_s " s + 0)
#     }'
# }
#
# _apply_tmux_256color() {
#   case "$(tmux show -gv default-terminal)" in
#     tmux-256color|tmux-direct)
#       return
#       ;;
#   esac
#
#   # when tmux-256color is available, use it
#   # on macOS though, make sure to use /usr/bin/infocmp to probe if it's availalbe system wide
#   case "$_uname_s" in
#     *Darwin*)
#       if /usr/bin/infocmp -x tmux-256color > /dev/null 2>&1; then
#         tmux set -g default-terminal 'tmux-256color'
#       fi
#       ;;
#      *)
#       if command infocmp -x tmux-256color > /dev/null 2>&1; then
#         tmux set -g default-terminal 'tmux-256color'
#       fi
#       ;;
#   esac
# }
#
# _apply_24b() {
#   tmux_conf_theme_24b_colour=${tmux_conf_theme_24b_colour:-auto}
#   tmux_conf_24b_colour=${tmux_conf_24b_colour:-$tmux_conf_theme_24b_colour}
#   if [ "$tmux_conf_24b_colour" = "auto" ]; then
#     case "$COLORTERM" in
#       truecolor|24bit)
#         apply_24b=true
#         ;;
#     esac
#     if [ "$apply_24b" = "" ] && [ "$(tput colors)" = "16777216" ]; then
#       apply_24b=true
#     fi
#   elif _is_true "$tmux_conf_24b_colour"; then
#     apply_24b=true
#   fi
#   if [ "$apply_24b" = "true" ]; then
#     case "$TERM" in
#       screen-*|tmux-*)
#         ;;
#       *)
#         tmux set-option -ga terminal-overrides ",*256col*:Tc"
#         ;;
#     esac
#   fi
# }
#
# _apply_theme() {
#   tmux_conf_theme=${tmux_conf_theme:-enabled}
#   if ! _is_disabled "$tmux_conf_theme"; then
#
#     # -- default theme -------------------------------------------------------
#
#     tmux_conf_theme_colour_1=${tmux_conf_theme_colour_1:-#080808}     # dark gray
#     tmux_conf_theme_colour_2=${tmux_conf_theme_colour_2:-#303030}     # gray
#     tmux_conf_theme_colour_3=${tmux_conf_theme_colour_3:-#8a8a8a}     # light gray
#     tmux_conf_theme_colour_4=${tmux_conf_theme_colour_4:-#00afff}     # light blue
#     tmux_conf_theme_colour_5=${tmux_conf_theme_colour_5:-#ffff00}     # yellow
#     tmux_conf_theme_colour_6=${tmux_conf_theme_colour_6:-#080808}     # dark gray
#     tmux_conf_theme_colour_7=${tmux_conf_theme_colour_7:-#e4e4e4}     # white
#     tmux_conf_theme_colour_8=${tmux_conf_theme_colour_8:-#080808}     # dark gray
#     tmux_conf_theme_colour_9=${tmux_conf_theme_colour_9:-#ffff00}     # yellow
#     tmux_conf_theme_colour_10=${tmux_conf_theme_colour_10:-#ff00af}   # pink
#     tmux_conf_theme_colour_11=${tmux_conf_theme_colour_11:-#5fff00}   # green
#     tmux_conf_theme_colour_12=${tmux_conf_theme_colour_12:-#8a8a8a}   # light gray
#     tmux_conf_theme_colour_13=${tmux_conf_theme_colour_13:-#e4e4e4}   # white
#     tmux_conf_theme_colour_14=${tmux_conf_theme_colour_14:-#080808}   # dark gray
#     tmux_conf_theme_colour_15=${tmux_conf_theme_colour_15:-#080808}   # dark gray
#     tmux_conf_theme_colour_16=${tmux_conf_theme_colour_16:-#d70000}   # red
#     tmux_conf_theme_colour_17=${tmux_conf_theme_colour_17:-#e4e4e4}   # white
#
#     # -- panes ---------------------------------------------------------------
#
#     tmux_conf_theme_window_fg=${tmux_conf_theme_window_fg:-default}
#     tmux_conf_theme_window_bg=${tmux_conf_theme_window_bg:-default}
#     tmux_conf_theme_highlight_focused_pane=${tmux_conf_theme_highlight_focused_pane:-false}
#     tmux_conf_theme_focused_pane_fg=${tmux_conf_theme_focused_pane_fg:-default}
#     tmux_conf_theme_focused_pane_bg=${tmux_conf_theme_focused_pane_bg:-$tmux_conf_theme_colour_2}
#
#     window_style="fg=$tmux_conf_theme_window_fg,bg=$tmux_conf_theme_window_bg"
#     if _is_true "$tmux_conf_theme_highlight_focused_pane"; then
#       window_active_style="fg=$tmux_conf_theme_focused_pane_fg,bg=$tmux_conf_theme_focused_pane_bg"
#     else
#       window_active_style="default"
#     fi
#
#     tmux_conf_theme_pane_border_style=${tmux_conf_theme_pane_border_style:-thin}
#     tmux_conf_theme_pane_border=${tmux_conf_theme_pane_border:-$tmux_conf_theme_colour_2}
#     tmux_conf_theme_pane_active_border=${tmux_conf_theme_pane_active_border:-$tmux_conf_theme_colour_4}
#     tmux_conf_theme_pane_border_fg=${tmux_conf_theme_pane_border_fg:-$tmux_conf_theme_pane_border}
#     tmux_conf_theme_pane_active_border_fg=${tmux_conf_theme_pane_active_border_fg:-$tmux_conf_theme_pane_active_border}
#     case "$tmux_conf_theme_pane_border_style" in
#       fat)
#         tmux_conf_theme_pane_border_bg=${tmux_conf_theme_pane_border_bg:-$tmux_conf_theme_pane_border_fg}
#         tmux_conf_theme_pane_active_border_bg=${tmux_conf_theme_pane_active_border_bg:-$tmux_conf_theme_pane_active_border_fg}
#         ;;
#       thin|*)
#         tmux_conf_theme_pane_border_bg=${tmux_conf_theme_pane_border_bg:-default}
#         tmux_conf_theme_pane_active_border_bg=${tmux_conf_theme_pane_active_border_bg:-default}
#         ;;
#     esac
#
#     tmux_conf_theme_pane_indicator=${tmux_conf_theme_pane_indicator:-$tmux_conf_theme_colour_4}
#     tmux_conf_theme_pane_active_indicator=${tmux_conf_theme_pane_active_indicator:-$tmux_conf_theme_colour_4}
#
#     # -- status line ---------------------------------------------------------
#
#     tmux_conf_theme_left_separator_main=$(_decode_unicode_escapes "${tmux_conf_theme_left_separator_main-}")
#     tmux_conf_theme_left_separator_sub=$(_decode_unicode_escapes "${tmux_conf_theme_left_separator_sub-|}")
#     tmux_conf_theme_right_separator_main=$(_decode_unicode_escapes "${tmux_conf_theme_right_separator_main-}")
#     tmux_conf_theme_right_separator_sub=$(_decode_unicode_escapes "${tmux_conf_theme_right_separator_sub-|}")
#
#     tmux_conf_theme_message_fg=${tmux_conf_theme_message_fg:-$tmux_conf_theme_colour_1}
#     tmux_conf_theme_message_bg=${tmux_conf_theme_message_bg:-$tmux_conf_theme_colour_5}
#     tmux_conf_theme_message_attr=${tmux_conf_theme_message_attr:-bold}
#
#     tmux_conf_theme_message_command_fg=${tmux_conf_theme_message_command_fg:-$tmux_conf_theme_colour_5}
#     tmux_conf_theme_message_command_bg=${tmux_conf_theme_message_command_bg:-$tmux_conf_theme_colour_1}
#     tmux_conf_theme_message_command_attr=${tmux_conf_theme_message_command_attr:-bold}
#
#     tmux_conf_theme_mode_fg=${tmux_conf_theme_mode_fg:-$tmux_conf_theme_colour_1}
#     tmux_conf_theme_mode_bg=${tmux_conf_theme_mode_bg:-$tmux_conf_theme_colour_5}
#     tmux_conf_theme_mode_attr=${tmux_conf_theme_mode_attr:-bold}
#
#     tmux_conf_theme_status_fg=${tmux_conf_theme_status_fg:-$tmux_conf_theme_colour_3}
#     tmux_conf_theme_status_bg=${tmux_conf_theme_status_bg:-$tmux_conf_theme_colour_1}
#     tmux_conf_theme_status_attr=${tmux_conf_theme_status_attr:-none}
#
#     tmux_conf_theme_terminal_title=${tmux_conf_theme_terminal_title:-#h ❐ #S ● #I #W}
#
#     tmux_conf_theme_window_status_fg=${tmux_conf_theme_window_status_fg:-$tmux_conf_theme_colour_3}
#     tmux_conf_theme_window_status_bg=${tmux_conf_theme_window_status_bg:-$tmux_conf_theme_colour_1}
#     tmux_conf_theme_window_status_attr=${tmux_conf_theme_window_status_attr:-none}
#     tmux_conf_theme_window_status_format=${tmux_conf_theme_window_status_format:-'#I #W#{?#{||:#{window_bell_flag},#{window_zoomed_flag}}, ,}#{?window_bell_flag,!,}#{?window_zoomed_flag,Z,}'}
#
#     tmux_conf_theme_window_status_current_fg=${tmux_conf_theme_window_status_current_fg:-$tmux_conf_theme_colour_1}
#     tmux_conf_theme_window_status_current_bg=${tmux_conf_theme_window_status_current_bg:-$tmux_conf_theme_colour_4}
#     tmux_conf_theme_window_status_current_attr=${tmux_conf_theme_window_status_current_attr:-bold}
#     tmux_conf_theme_window_status_current_format=${tmux_conf_theme_window_status_current_format:-'#I #W#{?#{||:#{window_bell_flag},#{window_zoomed_flag}}, ,}#{?window_bell_flag,!,}#{?window_zoomed_flag,Z,}'}
#
#     tmux_conf_theme_window_status_activity_fg=${tmux_conf_theme_window_status_activity_fg:-default}
#     tmux_conf_theme_window_status_activity_bg=${tmux_conf_theme_window_status_activity_bg:-default}
#     tmux_conf_theme_window_status_activity_attr=${tmux_conf_theme_window_status_activity_attr:-underscore}
#
#     tmux_conf_theme_window_status_bell_fg=${tmux_conf_theme_window_status_bell_fg:-$tmux_conf_theme_colour_5}
#     tmux_conf_theme_window_status_bell_bg=${tmux_conf_theme_window_status_bell_bg:-default}
#     tmux_conf_theme_window_status_bell_attr=${tmux_conf_theme_window_status_bell_attr:-blink,bold}
#
#     tmux_conf_theme_window_status_last_fg=${tmux_conf_theme_window_status_last_fg:-$tmux_conf_theme_colour_4}
#     tmux_conf_theme_window_status_last_bg=${tmux_conf_theme_window_status_last_bg:-default}
#     tmux_conf_theme_window_status_last_attr=${tmux_conf_theme_window_status_last_attr:-none}
#
#     if [ "$tmux_conf_theme_window_status_bg" = "$tmux_conf_theme_status_bg" ] || [ "$tmux_conf_theme_window_status_bg" = "default" ]; then
#       spacer=''
#       spacer_current=' '
#     else
#       spacer=' '
#       spacer_current=' '
#     fi
#     if [ "$tmux_conf_theme_window_status_last_bg" = "$tmux_conf_theme_status_bg" ] || [ "$tmux_conf_theme_window_status_last_bg" = "default" ] ; then
#       spacer_last=''
#     else
#       spacer_last=' '
#     fi
#     if [ "$tmux_conf_theme_window_status_activity_bg" = "$tmux_conf_theme_status_bg" ] || [ "$tmux_conf_theme_window_status_activity_bg" = "default" ] ; then
#       spacer_activity=''
#       spacer_last_activity="$spacer_last"
#     else
#       spacer_activity=' '
#       spacer_last_activity=' '
#     fi
#     if [ "$tmux_conf_theme_window_status_bell_bg" = "$tmux_conf_theme_status_bg" ] || [ "$tmux_conf_theme_window_status_bell_bg" = "default" ] ; then
#       spacer_bell=''
#       spacer_last_bell="$spacer_last"
#       spacer_activity_bell="$spacer_activity"
#       spacer_last_activity_bell="$spacer_last_activity"
#     else
#       spacer_bell=' '
#       spacer_last_bell=' '
#       spacer_activity_bell=' '
#       spacer_last_activity_bell=' '
#     fi
#     spacer="#{?window_last_flag,#{?window_activity_flag,#{?window_bell_flag,$spacer_last_activity_bell,$spacer_last_activity},#{?window_bell_flag,$spacer_last_bell,$spacer_last}},#{?window_activity_flag,#{?window_bell_flag,$spacer_activity_bell,$spacer_activity},#{?window_bell_flag,$spacer_bell,$spacer}}}"
#     if [ "$(tmux show -g -v status-justify)" = "right" ]; then
#       if [ -z "$tmux_conf_theme_right_separator_main" ]; then
#         window_status_separator=' '
#       else
#         window_status_separator=''
#       fi
#       window_status_format="#[fg=$tmux_conf_theme_window_status_bg,bg=$tmux_conf_theme_status_bg,none]#{?window_last_flag,$(printf '%s' "$tmux_conf_theme_window_status_last_bg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_activity_flag,$(printf '%s' "$tmux_conf_theme_window_status_activity_bg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_bell_flag,$(printf '%s' "$tmux_conf_theme_window_status_bell_bg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}$tmux_conf_theme_right_separator_main#[fg=$tmux_conf_theme_window_status_fg,bg=$tmux_conf_theme_window_status_bg,$tmux_conf_theme_window_status_attr]#{?window_last_flag,$(printf '%s' "$tmux_conf_theme_window_status_last_fg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_last_flag,$(printf '%s' "$tmux_conf_theme_window_status_last_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#{?window_activity_flag,$(printf '%s' "$tmux_conf_theme_window_status_activity_fg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_activity_flag,$(printf '%s' "$tmux_conf_theme_window_status_activity_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#{?window_bell_flag,$(printf '%s' "$tmux_conf_theme_window_status_bell_fg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_bell_flag,$(printf '%s' "$tmux_conf_theme_window_status_bell_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}$spacer$(printf '%s' "$tmux_conf_theme_window_status_last_attr" | perl -n -e 'print "#{?window_last_flag,#[none],}" if !/default/ ; s/([a-z]+),?/#{?window_last_flag,#[\1],}/g; print if !/default/')$(printf '%s' "$tmux_conf_theme_window_status_activity_attr" | perl -n -e 'print "#{?window_activity_flag?,#[none],}" if !/default/ ; s/([a-z]+),?/#{?window_activity_flag,#[\1],}/g; print if !/default/')$(printf '%s' "$tmux_conf_theme_window_status_bell_attr" | perl -n -e 'print "#{?window_bell_flag,#[none],}" if !/default/ ; s/([a-z]+),?/#{?window_bell_flag,#[\1],}/g; print if !/default/')$tmux_conf_theme_window_status_format#[none]$spacer#[fg=$tmux_conf_theme_status_bg,bg=$tmux_conf_theme_window_status_bg]#{?window_last_flag,$(printf '%s' "$tmux_conf_theme_window_status_last_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#{?window_activity_flag,$(printf '%s' "$tmux_conf_theme_window_status_activity_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#{?window_bell_flag,$(printf '%s' "$tmux_conf_theme_window_status_bell_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#[none]$tmux_conf_theme_right_separator_main"
#       window_status_current_format="#[fg=$tmux_conf_theme_window_status_current_bg,bg=$tmux_conf_theme_status_bg,none]$tmux_conf_theme_right_separator_main#[fg=$tmux_conf_theme_window_status_current_fg,bg=$tmux_conf_theme_window_status_current_bg,$tmux_conf_theme_window_status_current_attr]$spacer_current$tmux_conf_theme_window_status_current_format$spacer_current#[fg=$tmux_conf_theme_status_bg,bg=$tmux_conf_theme_window_status_current_bg,none]$tmux_conf_theme_right_separator_main"
#     else
#       if [ -z "$tmux_conf_theme_left_separator_main" ]; then
#         window_status_separator=' '
#       else
#         window_status_separator=''
#       fi
#       window_status_format="#[fg=$tmux_conf_theme_status_bg,bg=$tmux_conf_theme_window_status_bg,none]#{?window_last_flag,$(printf '%s' "$tmux_conf_theme_window_status_last_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#{?window_activity_flag,$(printf '%s' "$tmux_conf_theme_window_status_activity_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#{?window_bell_flag,$(printf '%s' "$tmux_conf_theme_window_status_bell_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}$tmux_conf_theme_left_separator_main#[fg=$tmux_conf_theme_window_status_fg,bg=$tmux_conf_theme_window_status_bg,$tmux_conf_theme_window_status_attr]#{?window_last_flag,$(printf '%s' "$tmux_conf_theme_window_status_last_fg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_last_flag,$(printf '%s' "$tmux_conf_theme_window_status_last_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#{?window_activity_flag,$(printf '%s' "$tmux_conf_theme_window_status_activity_fg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_activity_flag,$(printf '%s' "$tmux_conf_theme_window_status_activity_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}#{?window_bell_flag,$(printf '%s' "$tmux_conf_theme_window_status_bell_fg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_bell_flag,$(printf '%s' "$tmux_conf_theme_window_status_bell_bg" | perl -n -e "s/.+/#[bg=$&]/; print if !/default/"),}$spacer$(printf '%s' "$tmux_conf_theme_window_status_last_attr" | perl -n -e 'print "#{?window_last_flag,#[none],}" if !/default/ ; s/([a-z]+),?/#{?window_last_flag,#[\1],}/g; print if !/default/')$(printf '%s' "$tmux_conf_theme_window_status_activity_attr" | perl -n -e 'print "#{?window_activity_flag,#[none],}" if !/default/ ; s/([a-z]+),?/#{?window_activity_flag,#[\1],}/g; print if !/default/')$(printf '%s' "$tmux_conf_theme_window_status_bell_attr" | perl -n -e 'print "#{?window_bell_flag,#[none],}" if /!default/ ; s/([a-z]+),?/#{?window_bell_flag,#[\1],}/g; print if !/default/')$tmux_conf_theme_window_status_format#[none]$spacer#[fg=$tmux_conf_theme_window_status_bg,bg=$tmux_conf_theme_status_bg]#{?window_last_flag,$(printf '%s' "$tmux_conf_theme_window_status_last_bg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_activity_flag,$(printf '%s' "$tmux_conf_theme_window_status_activity_bg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}#{?window_bell_flag,$(printf '%s' "$tmux_conf_theme_window_status_bell_bg" | perl -n -e "s/.+/#[fg=$&]/; print if !/default/"),}$tmux_conf_theme_left_separator_main"
#       window_status_current_format="#[fg=$tmux_conf_theme_status_bg,bg=$tmux_conf_theme_window_status_current_bg,none]$tmux_conf_theme_left_separator_main#[fg=$tmux_conf_theme_window_status_current_fg,bg=$tmux_conf_theme_window_status_current_bg,$tmux_conf_theme_window_status_current_attr]$spacer_current$tmux_conf_theme_window_status_current_format$spacer_current#[fg=$tmux_conf_theme_window_status_current_bg,bg=$tmux_conf_theme_status_bg]$tmux_conf_theme_left_separator_main"
#     fi
#
#     # -- indicators
#
#     tmux_conf_theme_pairing=${tmux_conf_theme_pairing:-⚇}                         # U+2687
#     tmux_conf_theme_pairing_fg=${tmux_conf_theme_pairing_fg:-none}
#     tmux_conf_theme_pairing_bg=${tmux_conf_theme_pairing_bg:-none}
#     tmux_conf_theme_pairing_attr=${tmux_conf_theme_pairing_attr:-none}
#
#     tmux_conf_theme_prefix=${tmux_conf_theme_prefix:-⌨}                           # U+2328
#     tmux_conf_theme_prefix_fg=${tmux_conf_theme_prefix_fg:-none}
#     tmux_conf_theme_prefix_bg=${tmux_conf_theme_prefix_bg:-none}
#     tmux_conf_theme_prefix_attr=${tmux_conf_theme_prefix_attr:-none}
#
#     tmux_conf_theme_mouse=${tmux_conf_theme_mouse:-↗}                             # U+2197
#     tmux_conf_theme_mouse_fg=${tmux_conf_theme_mouse_fg:-none}
#     tmux_conf_theme_mouse_bg=${tmux_conf_theme_mouse_bg:-none}
#     tmux_conf_theme_mouse_attr=${tmux_conf_theme_mouse_attr:-none}
#
#     tmux_conf_theme_root=${tmux_conf_theme_root:-!}
#     tmux_conf_theme_root_fg=${tmux_conf_theme_root_fg:-none}
#     tmux_conf_theme_root_bg=${tmux_conf_theme_root_bg:-none}
#     tmux_conf_theme_root_attr=${tmux_conf_theme_root_attr:-bold,blink}
#
#     tmux_conf_theme_synchronized=${tmux_conf_theme_synchronized:-⚏}               # U+268F
#     tmux_conf_theme_synchronized_fg=${tmux_conf_theme_synchronized_fg:-none}
#     tmux_conf_theme_synchronized_bg=${tmux_conf_theme_synchronized_bg:-none}
#     tmux_conf_theme_synchronized_attr=${tmux_conf_theme_synchronized_attr:-none}
#
#     # -- status-left style
#
#     tmux_conf_theme_status_left=${tmux_conf_theme_status_left-' ❐ #S | ↑#{?uptime_y, #{uptime_y}y,}#{?uptime_d, #{uptime_d}d,}#{?uptime_h, #{uptime_h}h,}#{?uptime_m, #{uptime_m}m,} '}
#     tmux_conf_theme_status_left_fg=${tmux_conf_theme_status_left_fg:-$tmux_conf_theme_colour_6,$tmux_conf_theme_colour_7,$tmux_conf_theme_colour_8}
#     tmux_conf_theme_status_left_bg=${tmux_conf_theme_status_left_bg:-$tmux_conf_theme_colour_9,$tmux_conf_theme_colour_10,$tmux_conf_theme_colour_11}
#     tmux_conf_theme_status_left_attr=${tmux_conf_theme_status_left_attr:-bold,none,none}
#
#     if [ -n "$tmux_conf_theme_status_left" ]; then
#       status_left=$(echo "$tmux_conf_theme_status_left" | sed \
#         -e "s/#{pairing}/#[fg=$tmux_conf_theme_pairing_fg]#[bg=$tmux_conf_theme_pairing_bg]#[$tmux_conf_theme_pairing_attr]#{pairing}#[inherit]/g" \
#         -e "s/#{prefix}/#[fg=$tmux_conf_theme_prefix_fg]#[bg=$tmux_conf_theme_prefix_bg]#[$tmux_conf_theme_prefix_attr]#{prefix}#[inherit]/g" \
#         -e "s/#{mouse}/#[fg=$tmux_conf_theme_mouse_fg]#[bg=$tmux_conf_theme_mouse_bg]#[$tmux_conf_theme_mouse_attr]#{mouse}#[inherit]/g" \
#         -e "s/#{synchronized}/#[fg=$tmux_conf_theme_synchronized_fg]#[bg=$tmux_conf_theme_synchronized_bg]#[$tmux_conf_theme_synchronized_attr]#{synchronized}#[inherit]/g" \
#         -e "s/#{root}/#[fg=$tmux_conf_theme_root_fg]#[bg=$tmux_conf_theme_root_bg]#[$tmux_conf_theme_root_attr]#{root}#[inherit]/g")
#
#       status_left=$(printf '%s' "$status_left" | awk \
#                         -v status_bg="$tmux_conf_theme_status_bg" \
#                         -v fg_="$tmux_conf_theme_status_left_fg" \
#                         -v bg_="$tmux_conf_theme_status_left_bg" \
#                         -v attr_="$tmux_conf_theme_status_left_attr" \
#                         -v mainsep="$tmux_conf_theme_left_separator_main" \
#                         -v subsep="$tmux_conf_theme_left_separator_sub" '
#         function subsplit(s, l, i, a, r)
#         {
#           l = split(s, a, ",")
#           for (i = 1; i <= l; ++i)
#           {
#             o = split(a[i], _, "(") - 1
#             c = split(a[i], _, ")") - 1
#             open += o - c
#             o_ = split(a[i], _, "{") - 1
#             c_ = split(a[i], _, "}") - 1
#             open_ += o_ - c_
#             o__ = split(a[i], _, "[") - 1
#             c__ = split(a[i], _, "]") - 1
#             open__ += o__ - c__
#
#             if (i == l)
#               r = sprintf("%s%s", r, a[i])
#             else if (open || open_ || open__)
#               r = sprintf("%s%s,", r, a[i])
#             else
#               r = sprintf("%s%s#[fg=%s,bg=%s,%s]%s", r, a[i], fg[j], bg[j], attr[j], subsep)
#           }
#
#           gsub(/#\[inherit\]/, sprintf("#[default]#[fg=%s,bg=%s,%s]", fg[j], bg[j], attr[j]), r)
#           return r
#         }
#         BEGIN {
#           FS = "|"
#           l1 = split(fg_, fg, ",")
#           l2 = split(bg_, bg, ",")
#           l3 = split(attr_, attr, ",")
#           l = l1 < l2 ? (l1 < l3 ? l1 : l3) : (l2 < l3 ? l2 : l3)
#         }
#         {
#           for (i = j = 1; i <= NF; ++i)
#           {
#             if (open || open_ || open__)
#               printf "|%s", subsplit($i)
#             else
#             {
#               if (i > 1)
#                 printf "#[fg=%s,bg=%s,none]%s#[fg=%s,bg=%s,%s]%s", bg[j_], bg[j], mainsep, fg[j], bg[j], attr[j], subsplit($i)
#               else
#                 printf "#[fg=%s,bg=%s,%s]%s", fg[j], bg[j], attr[j], subsplit($i)
#             }
#
#             if (!open && !open_ && !open__)
#             {
#               j_ = j
#               j = j % l + 1
#             }
#           }
#           printf "#[fg=%s,bg=%s,none]%s", bg[j_], status_bg, mainsep
#         }')
#     fi
#     status_left="$status_left "
#
#     # -- status-right style
#
#     tmux_conf_theme_status_right=${tmux_conf_theme_status_right-' #{prefix}#{mouse}#{pairing}#{synchronized}#{?battery_percentage, #{battery_percentage},} , %R , %d %b | #{username}#{root} '}
#     tmux_conf_theme_status_right_fg=${tmux_conf_theme_status_right_fg:-$tmux_conf_theme_colour_12,$tmux_conf_theme_colour_13,$tmux_conf_theme_colour_14}
#     tmux_conf_theme_status_right_bg=${tmux_conf_theme_status_right_bg:-$tmux_conf_theme_colour_15,$tmux_conf_theme_colour_16,$tmux_conf_theme_colour_17}
#     tmux_conf_theme_status_right_attr=${tmux_conf_theme_status_right_attr:-none,none,bold}
#
#     if [ -n "$tmux_conf_theme_status_right" ]; then
#       status_right=$(echo "$tmux_conf_theme_status_right" | sed \
#         -e "s/#{pairing}/#[fg=$tmux_conf_theme_pairing_fg]#[bg=$tmux_conf_theme_pairing_bg]#[$tmux_conf_theme_pairing_attr]#{pairing}#[inherit]/g" \
#         -e "s/#{prefix}/#[fg=$tmux_conf_theme_prefix_fg]#[bg=$tmux_conf_theme_prefix_bg]#[$tmux_conf_theme_prefix_attr]#{prefix}#[inherit]/g" \
#         -e "s/#{mouse}/#[fg=$tmux_conf_theme_mouse_fg]#[bg=$tmux_conf_theme_mouse_bg]#[$tmux_conf_theme_mouse_attr]#{mouse}#[inherit]/g" \
#         -e "s/#{synchronized}/#[fg=$tmux_conf_theme_synchronized_fg]#[bg=$tmux_conf_theme_synchronized_bg]#[$tmux_conf_theme_synchronized_attr]#{synchronized}#[inherit]/g" \
#         -e "s/#{root}/#[fg=$tmux_conf_theme_root_fg]#[bg=$tmux_conf_theme_root_bg]#[$tmux_conf_theme_root_attr]#{root}#[inherit]/g")
#
#       status_right=$(printf '%s' "$status_right" | awk \
#                         -v status_bg="$tmux_conf_theme_status_bg" \
#                         -v fg_="$tmux_conf_theme_status_right_fg" \
#                         -v bg_="$tmux_conf_theme_status_right_bg" \
#                         -v attr_="$tmux_conf_theme_status_right_attr" \
#                         -v mainsep="$tmux_conf_theme_right_separator_main" \
#                         -v subsep="$tmux_conf_theme_right_separator_sub" '
#         function subsplit(s, l, i, a, r)
#         {
#           l = split(s, a, ",")
#           for (i = 1; i <= l; ++i)
#           {
#             o = split(a[i], _, "(") - 1
#             c = split(a[i], _, ")") - 1
#             open += o - c
#             o_ = split(a[i], _, "{") - 1
#             c_ = split(a[i], _, "}") - 1
#             open_ += o_ - c_
#             o__ = split(a[i], _, "[") - 1
#             c__ = split(a[i], _, "]") - 1
#             open__ += o__ - c__
#
#             if (i == l)
#               r = sprintf("%s%s", r, a[i])
#             else if (open || open_ || open__)
#               r = sprintf("%s%s,", r, a[i])
#             else
#               r = sprintf("%s%s#[fg=%s,bg=%s,%s]%s", r, a[i], fg[j], bg[j], attr[j], subsep)
#           }
#
#           gsub(/#\[inherit\]/, sprintf("#[default]#[fg=%s,bg=%s,%s]", fg[j], bg[j], attr[j]), r)
#           return r
#         }
#         BEGIN {
#           FS = "|"
#           l1 = split(fg_, fg, ",")
#           l2 = split(bg_, bg, ",")
#           l3 = split(attr_, attr, ",")
#           l = l1 < l2 ? (l1 < l3 ? l1 : l3) : (l2 < l3 ? l2 : l3)
#         }
#         {
#           for (i = j = 1; i <= NF; ++i)
#           {
#             if (open_ || open || open__)
#               printf "|%s", subsplit($i)
#             else
#               printf "#[fg=%s,bg=%s,none]%s#[fg=%s,bg=%s,%s]%s", bg[j], (i == 1) ? status_bg : bg[j_], mainsep, fg[j], bg[j], attr[j], subsplit($i)
#
#             if (!open && !open_ && !open__)
#             {
#               j_ = j
#               j = j % l + 1
#             }
#           }
#         }')
#     fi
#     status_right=${status_right-}
#
#     # -- clock ---------------------------------------------------------------
#
#     tmux_conf_theme_clock_colour=${tmux_conf_theme_clock_colour:-$tmux_conf_theme_colour_4}
#     tmux_conf_theme_clock_style=${tmux_conf_theme_clock_style:-24}
#
#     tmux setw -g window-style "$window_style" \; setw -g window-active-style "$window_active_style" \;\
#          setw -g pane-border-style "fg=$tmux_conf_theme_pane_border_fg,bg=$tmux_conf_theme_pane_border_bg" \; set -g pane-active-border-style "fg=$tmux_conf_theme_pane_active_border_fg,bg=$tmux_conf_theme_pane_active_border_bg" \;\
#          set -g display-panes-colour "$tmux_conf_theme_pane_indicator" \; set -g display-panes-active-colour "$tmux_conf_theme_pane_active_indicator" \;\
#          set -g message-style "fg=$tmux_conf_theme_message_fg,bg=$tmux_conf_theme_message_bg,$tmux_conf_theme_message_attr" \;\
#          set -g message-command-style "fg=$tmux_conf_theme_message_command_fg,bg=$tmux_conf_theme_message_command_bg,$tmux_conf_theme_message_command_attr" \;\
#          setw -g mode-style "fg=$tmux_conf_theme_mode_fg,bg=$tmux_conf_theme_mode_bg,$tmux_conf_theme_mode_attr" \;\
#          set -g status-style "fg=$tmux_conf_theme_status_fg,bg=$tmux_conf_theme_status_bg,$tmux_conf_theme_status_attr" \;\
#          set -g status-left-style "fg=$tmux_conf_theme_status_fg,bg=$tmux_conf_theme_status_bg,$tmux_conf_theme_status_attr" \;\
#          set -g status-right-style "fg=$tmux_conf_theme_status_fg,bg=$tmux_conf_theme_status_bg,$tmux_conf_theme_status_attr" \;\
#          setw -g window-status-style "fg=$tmux_conf_theme_window_status_fg,bg=$tmux_conf_theme_window_status_bg,$tmux_conf_theme_window_status_attr" \;\
#          setw -g window-status-current-style "fg=$tmux_conf_theme_window_status_current_fg,bg=$tmux_conf_theme_window_status_current_bg,$tmux_conf_theme_window_status_current_attr" \;\
#          setw -g window-status-activity-style "fg=$tmux_conf_theme_window_status_activity_fg,bg=$tmux_conf_theme_window_status_activity_bg,$tmux_conf_theme_window_status_activity_attr" \;\
#          setw -g window-status-bell-style "fg=$tmux_conf_theme_window_status_bell_fg,bg=$tmux_conf_theme_window_status_bell_bg,$tmux_conf_theme_window_status_bell_attr" \;\
#          setw -g window-status-last-style "fg=$tmux_conf_theme_window_status_last_fg,bg=$tmux_conf_theme_window_status_last_bg,$tmux_conf_theme_window_status_last_attr" \;\
#          setw -g window-status-separator "$window_status_separator" \;\
#          setw -g clock-mode-colour "$tmux_conf_theme_clock_colour" \;\
#          setw -g clock-mode-style "$tmux_conf_theme_clock_style"
#   fi
#
#   # -- variables -------------------------------------------------------------
#
#   set_titles_string=$(printf '%s' "${tmux_conf_theme_terminal_title:-$(tmux show -gv set-titles-string)}" | sed \
#     -e "s%#{username}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' false '#D')%g" \
#     -e "s%#{username_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' true '#D')%g")
#
#   window_status_format=$(printf '%s' "${window_status_format:-$(tmux show -gv window-status-format)}" | sed \
#     -e "s%#{username}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' false '#D')%g" \
#     -e "s%#{username_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' true '#D')%g")
#
#   window_status_current_format=$(printf '%s' "${window_status_current_format:-$(tmux show -gv window-status-current-format)}" | sed \
#     -e "s%#{username}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' false '#D')%g" \
#     -e "s%#{username_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' true '#D')%g")
#
#   status_left=$(printf '%s' "${status_left-$(tmux show -gv status-left)}" | sed \
#     -e "s/#{pairing}/#{?session_many_attached,$tmux_conf_theme_pairing ,}/g" \
#     -e "s/#{prefix}/#{?client_prefix,$tmux_conf_theme_prefix ,$(printf '%s' "$tmux_conf_theme_prefix" | sed -e 's/./ /g') }/g" \
#     -e "s/#{mouse}/#{?mouse,$tmux_conf_theme_mouse ,$(printf '%s' "$tmux_conf_theme_mouse" | sed -e 's/./ /g') }/g" \
#     -e "s%#{synchronized}%#{?pane_synchronized,$tmux_conf_theme_synchronized ,}%g" \
#     -e "s%#{root}%#{?#{==:#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' '#D'),root},$tmux_conf_theme_root,}%g")
#
#   status_right=$(printf '%s' "${status_right-$(tmux show -gv status-right)}" | sed \
#     -e "s/#{pairing}/#{?session_many_attached,$tmux_conf_theme_pairing ,}/g" \
#     -e "s/#{prefix}/#{?client_prefix,$tmux_conf_theme_prefix ,$(printf '%s' "$tmux_conf_theme_prefix" | sed -e 's/./ /g') }/g" \
#     -e "s/#{mouse}/#{?mouse,$tmux_conf_theme_mouse ,$(printf '%s' "$tmux_conf_theme_mouse" | sed -e 's/./ /g') }/g" \
#     -e "s%#{synchronized}%#{?pane_synchronized,$tmux_conf_theme_synchronized ,}%g" \
#     -e "s%#{root}%#{?#{==:#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' '#D'),root},$tmux_conf_theme_root,}%g")
#
#   case "$status_left $status_right" in
#     *'#{username}'*|*'#{hostname}'*|*'#{hostname_full}'*|*'#{username_ssh}'*|*'#{hostname_ssh}'*|*'#{hostname_full_ssh}'*)
#       status_left=$(echo "$status_left" | sed \
#         -e "s%#{username}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' false '#D')%g" \
#         -e "s%#{username_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' true '#D')%g")
#       status_right=$(echo "$status_right" | sed \
#         -e "s%#{username}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' false '#D')%g" \
#         -e "s%#{username_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' true '#D')%g")
#       ;;
#   esac
#
#   _pkillf "cut -c3- '$TMUX_CONF' \| sh -s _uptime"
#   case "$status_left $status_right" in
#     *'#{uptime_'*|*'#{?uptime_'*)
#       status_left=$(echo "$status_left" | perl -p -e '
#         ; s/#\{(\?)?uptime_y\b/#\{\1\@uptime_y/g
#         ; s/#\{(\?)?uptime_d\b/#\{\1\@uptime_d/g
#         ; s/\@uptime_d\b/\@uptime_dy/g if /\@uptime_y\b/
#         ; s/#\{(\?)?uptime_h\b/#\{\1\@uptime_h/g
#         ; s/#\{(\?)?uptime_m\b/#\{\1\@uptime_m/g
#         ; s/#\{(\?)?uptime_s\b/#\{\1\@uptime_s/g')
#       status_right=$(echo "$status_right" | perl -p -e '
#         ; s/#\{(\?)?uptime_y\b/#\{\1\@uptime_y/g
#         ; s/#\{(\?)?uptime_d\b/#\{\1\@uptime_d/g
#         ; s/\@uptime_d\b/\@uptime_dy/g if /\@uptime_y\b/
#         ; s/#\{(\?)?uptime_h\b/#\{\1\@uptime_h/g
#         ; s/#\{(\?)?uptime_m\b/#\{\1\@uptime_m/g
#         ; s/#\{(\?)?uptime_s\b/#\{\1\@uptime_s/g')
#       interval=60
#       case "$status_left $status_right" in
#         *'#{@uptime_s}'*)
#           interval=$(tmux show -gv status-interval)
#           ;;
#       esac
#       if [ "$_tmux_version" -ge 320 ]; then
#         tmux run -b "trap '[ -n \"\$sleep_pid\" ] && kill -9 \"\$sleep_pid\"; exit 0' TERM; while [ x\"\$('$TMUX_PROGRAM' -S '#{socket_path}' display -p '#{l:#{pid}}')\" = x\"#{pid}\" ]; do nice cut -c3- '$TMUX_CONF' | sh -s _uptime; sleep $interval & sleep_pid=\$!; wait \"\$sleep_pid\"; sleep_pid=; done"
#       elif [ "$_tmux_version" -ge 280 ]; then
#         status_right="#(echo; while [ x\"\$('$TMUX_PROGRAM' -S '#{socket_path}' display -p '#{l:#{pid}}')\" = x\"#{pid}\" ]; do nice cut -c3- '$TMUX_CONF' | sh -s _uptime; sleep $interval; done)$status_right"
#       elif [ "$_tmux_version" -gt 240 ]; then
#         status_right="#(echo; while :; do nice cut -c3- '$TMUX_CONF' | sh -s _uptime; sleep $interval; done)$status_right"
#       else
#         status_right="#(nice cut -c3- '$TMUX_CONF' | sh -s _uptime)$status_right"
#       fi
#       ;;
#   esac
#
#   # -- custom variables ------------------------------------------------------
#
#   if [ -f "$TMUX_CONF_LOCAL" ] && [ "$(cut -c3- "$TMUX_CONF_LOCAL" | sh 2>/dev/null -s printf probe)" = "probe" ]; then
#     replacements=$(perl -n -e 'print if s!^#\s+([^_][^()\s]+)\s*\(\)\s*{\s*(?:#.*)?\n!s%#\\\{\1((?:\\s+(?:[^\{\}]+?|#\\{(?:[^\{\}]+?)\}))*)\\\}%#(cut -c3- \"\\\$TMUX_CONF_LOCAL\" | sh -s \1\\1)%g; !p' "$TMUX_CONF_LOCAL")
#     status_left=$(echo "$status_left" | perl -p -e "$replacements" || echo "$status_left")
#     status_right=$(echo "$status_right" | perl -p -e "$replacements" || echo "$status_right")
#   fi
#
#   # --------------------------------------------------------------------------
#
#   tmux set -g set-titles-string "$(_decode_unicode_escapes "$set_titles_string")" \;\
#        setw -g window-status-format "$(_decode_unicode_escapes "$window_status_format")" \;\
#        setw -g window-status-current-format "$(_decode_unicode_escapes "$window_status_current_format")" \;\
#        set -g status-left-length 1000 \; set -g status-left "$(_decode_unicode_escapes "$status_left")" \;\
#        set -g status-right-length 1000 \; set -g status-right "$(_decode_unicode_escapes "$status_right")"
# }
#
#
# _apply_configuration() {
#   window_active="$(tmux display -p '#{window_active}' 2>/dev/null || true)"
#   if [ -z "$window_active" ]; then
#     if ! command -v perl > /dev/null 2>&1; then
#       tmux run -b 'tmux set display-time 3000 \; display "This configuration requires perl" \; set -u display-time \; run "sleep 3" \; kill-server'
#       return
#     fi
#     if ! command -v sed > /dev/null 2>&1; then
#       tmux run -b 'tmux set display-time 3000 \; display "This configuration requires sed" \; set -u display-time \; run "sleep 3" \; kill-server'
#       return
#     fi
#     if ! command -v awk > /dev/null 2>&1; then
#       tmux run -b 'tmux set display-time 3000 \; display "This configuration requires awk" \; set -u display-time \; run "sleep 3" \; kill-server'
#       return
#     fi
#     if [ "$_tmux_version" -lt 260 ]; then
#       tmux run -b 'tmux set display-time 3000 \; display "This configuration requires tmux 2.6+" \; set -u display-time \; run "sleep 3" \; kill-server'
#       return
#     fi
#   fi
#
#   _apply_tmux_256color
#   _apply_24b&
#   _apply_theme&
#   wait
#
#   # shellcheck disable=SC2046
#   tmux setenv -gu tmux_conf_dummy $(printenv | grep -E -o '^tmux_conf_[^=]+' | awk '{printf "; setenv -gu %s", $0}')
# }
#
# "$@"
